CREATE TABLE archiwum_departamentow (
  id NUMBER,
  nazwa VARCHAR2(50),
  data_zamkniecia DATE,
  ostatni_manager VARCHAR2(100)
);
CREATE OR REPLACE TRIGGER ARCHIWIZUJDEPARTAMENTY
BEFORE DELETE ON Departments
FOR EACH ROW
DECLARE
  v_manager_name VARCHAR2(50);
BEGIN
  SELECT first_name || ' ' || last_name INTO v_manager_name
  FROM Employees
  WHERE department_id = :OLD.department_id
  ORDER BY hire_date DESC
  FETCH FIRST 1 ROW ONLY;

  INSERT INTO archiwum_departamentow (id, nazwa, data_zamkniecia, ostatni_manager)
  VALUES (:OLD.department_id, :OLD.department_name, SYSDATE, v_manager_name);
END;
/

CREATE OR REPLACE TRIGGER KontrolaZarobkow
BEFORE INSERT OR UPDATE ON Employees
FOR EACH ROW
DECLARE
BEGIN
  IF :NEW.salary < 2000 OR :NEW.salary > 26000 THEN
    RAISE_APPLICATION_ERROR(-20001, 'Zarobki muszą być w widełkach 2000 - 26000');
  END IF;
END;
/

CREATE TABLE Zlodziej (
  id NUMBER,
  username VARCHAR2(50),
  czas_zmiany TIMESTAMP
);
CREATE SEQUENCE Zlodziej_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER LogujZlodzieja
BEFORE INSERT OR UPDATE ON Employees
FOR EACH ROW
DECLARE
BEGIN
  IF :NEW.salary < 2000 OR :NEW.salary > 26000 THEN
    INSERT INTO Zlodziej (id, username, czas_zmiany)
    VALUES (Zlodziej_seq.NEXTVAL, USER, SYSTIMESTAMP);
    RAISE_APPLICATION_ERROR(-20002, 'Zarobki poza widełkami. Operacja zablokowana.');
  END IF;
END;
/

CREATE SEQUENCE Employees_seq START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER AutoIncrementEmployees
BEFORE INSERT ON Employees
FOR EACH ROW
BEGIN
  :NEW.employee_id := Employees_seq.NEXTVAL;
END;
/

CREATE OR REPLACE TRIGGER ZablokujJobGrades
BEFORE INSERT OR UPDATE OR DELETE ON Job_grades
BEGIN
  RAISE_APPLICATION_ERROR(-20003, 'Operacje na tabeli JOB_GRADES są zabronione.');
END;
/

CREATE OR REPLACE TRIGGER ZachowajStareWartosciJobs
BEFORE UPDATE ON Jobs
FOR EACH ROW
BEGIN
  :NEW.min_salary := :OLD.min_salary;
  :NEW.max_salary := :OLD.max_salary;
END;
/